const sequelize = require('./src/config/database');
const { faker } = require('@faker-js/faker');

const Department = require('./src/models/department.model');
const Major = require('./src/models/major.model');
const Student = require('./src/models/student.model');
const Course = require('./src/models/course.model');
const Grade = require('./src/models/grade.model');
const Certificate = require('./src/models/certificate.model');
const Role = require('./src/models/role.model');
const User = require('./src/models/user.model');

async function seed() {
    try {
        await sequelize.authenticate();
        console.log('‚úÖ Database connected...');

        await sequelize.sync({ force: true });
        console.log('‚úÖ Database dropped & recreated...');

        // ===================== Departments =====================
        const departmentsData = [
            { code: '7510301', name: 'C√¥ng ngh·ªá k·ªπ thu·∫≠t ƒëi·ªán, ƒëi·ªán t·ª≠' },
            { code: '7520115', name: 'K·ªπ thu·∫≠t Nhi·ªát' },
            { code: '7510403', name: 'C√¥ng ngh·ªá k·ªπ thu·∫≠t NƒÉng l∆∞·ª£ng' },
            { code: '7510601', name: 'Qu·∫£n l√Ω c√¥ng nghi·ªáp' },
            { code: '7510602', name: 'Qu·∫£n l√Ω nƒÉng l∆∞·ª£ng' },
            { code: '7510605', name: 'Logistics v√† qu·∫£n l√Ω chu·ªói cung ·ª©ng' },
            { code: '7510303', name: 'C√¥ng ngh·ªá k·ªπ thu·∫≠t ƒëi·ªÅu khi·ªÉn v√† t·ª± ƒë·ªông h√≥a' },
            { code: '7510302', name: 'C√¥ng ngh·ªá k·ªπ thu·∫≠t ƒêi·ªán t·ª≠ - Vi·ªÖn th√¥ng' },
            { code: '7480201', name: 'C√¥ng ngh·ªá th√¥ng tin' },
            { code: '75102101', name: 'C√¥ng ngh·ªá k·ªπ thu·∫≠t c∆° kh√≠' },
            { code: '7510102', name: 'C√¥ng ngh·ªá k·ªπ thu·∫≠t c√¥ng tr√¨nh x√¢y d·ª±ng' },
            { code: '7340101', name: 'Qu·∫£n tr·ªã kinh doanh' },
            { code: '7340201', name: 'T√†i ch√≠nh ‚Äì Ng√¢n h√†ng' },
            { code: '7340301', name: 'K·∫ø to√°n' },
            { code: '7340302', name: 'Ki·ªÉm to√°n' },
            { code: '7340122', name: 'Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠' },
            { code: '7810103', name: 'Qu·∫£n tr·ªã d·ªãch v·ª• du l·ªãch v√† l·ªØ h√†nh' },
            { code: '7520107', name: 'K·ªπ thu·∫≠t Robot' },
            { code: '7460108', name: 'Khoa h·ªçc d·ªØ li·ªáu' },
            { code: '7480106', name: 'K·ªπ thu·∫≠t m√°y t√≠nh' },
            { code: '7510205', name: 'C√¥ng ngh·ªá k·ªπ thu·∫≠t √¥ t√¥' },
            { code: '7810201', name: 'Qu·∫£n tr·ªã kh√°ch s·∫°n' },
            { code: '7340115', name: 'Marketing' },
            { code: '7340205', name: 'C√¥ng ngh·ªá t√†i ch√≠nh' },
            { code: '7480107', name: 'Tr√≠ tu·ªá nh√¢n t·∫°o' },
            { code: '7460117', name: 'To√°n tin' },
            { code: '7380107', name: 'Lu·∫≠t kinh t·∫ø' },
            { code: '7220201', name: 'Ng√¥n ng·ªØ Anh' },
        ];

        await Department.destroy({ where: {} });
        const departments = await Department.bulkCreate(departmentsData, { returning: true });
        console.log(`‚úÖ Created ${departments.length} departments`);

        // ===================== Majors =====================
        const majorsData = [
            ['H·ªá th·ªëng ƒëi·ªán', '7510301'],
            ['ƒêi·ªán c√¥ng nghi·ªáp v√† d√¢n d·ª•ng', '7510301'],
            ['T·ª± ƒë·ªông h√≥a h·ªá th·ªëng ƒëi·ªán', '7510301'],
            ['Nhi·ªát ƒëi·ªán', '7520115'],
            ['ƒêi·ªán l·∫°nh', '7520115'],
            ['Nhi·ªát c√¥ng nghi·ªáp', '7520115'],
            ['NƒÉng l∆∞·ª£ng t√°i t·∫°o', '7510403'],
            ['Qu·∫£n l√Ω c√¥ng nghi·ªáp', '7510601'],
            ['Qu·∫£n l√Ω nƒÉng l∆∞·ª£ng', '7510602'],
            ['Logistics v√† Qu·∫£n l√Ω chu·ªói cung ·ª©ng', '7510605'],
            ['C√¥ng ngh·ªá k·ªπ thu·∫≠t ƒëi·ªÅu khi·ªÉn', '7510303'],
            ['T·ª± ƒë·ªông h√≥a v√† ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã ƒëi·ªán c√¥ng nghi·ªáp', '7510303'],
            ['ƒêi·ªán t·ª≠ v√† k·ªπ thu·∫≠t m√°y t√≠nh', '7510302'],
            ['ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng', '7510302'],
            ['C√¥ng ngh·ªá ph·∫ßn m·ªÅm', '7480201'],
            ['H·ªá th·ªëng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠', '7480201'],
            ['Qu·∫£n tr·ªã v√† an ninh m·∫°ng', '7480201'],
            ['C∆° kh√≠ ch·∫ø t·∫°o m√°y', '75102101'],
            ['C∆° kh√≠ √¥ t√¥', '75102101'],
            ['X√¢y d·ª±ng c√¥ng tr√¨nh ƒëi·ªán', '7510102'],
            ['X√¢y d·ª±ng d√¢n d·ª•ng v√† c√¥ng nghi·ªáp', '7510102'],
            ['Qu·∫£n tr·ªã doanh nghi·ªáp', '7340101'],
            ['T√†i ch√≠nh doanh nghi·ªáp', '7340201'],
            ['Ng√¢n h√†ng', '7340201'],
            ['K·∫ø to√°n doanh nghi·ªáp', '7340301'],
            ['Ki·ªÉm to√°n', '7340302'],
            ['Kinh doanh th∆∞∆°ng m·∫°i tr·ª±c tuy·∫øn', '7340122'],
            ['Qu·∫£n tr·ªã d·ªãch v·ª• du l·ªãch v√† l·ªØ h√†nh', '7810103'],
            ['Robot t·ª± ƒë·ªông h√≥a c√¥ng nghi·ªáp', '7520107'],
            ['Khoa h·ªçc d·ªØ li·ªáu', '7460108'],
            ['M√°y t√≠nh v√† h·ªá th·ªëng nh√∫ng', '7480106'],
            ['C√¥ng ngh·ªá k·ªπ thu·∫≠t √¥ t√¥', '7510205'],
            ['Qu·∫£n tr·ªã kh√°ch s·∫°n', '7810201'],
            ['Marketing', '7340115'],
            ['C√¥ng ngh·ªá t√†i ch√≠nh', '7340205'],
            ['Tr√≠ tu·ªá nh√¢n t·∫°o trong t·ª± ƒë·ªông h√≥a', '7480107'],
            ['To√°n tin', '7460117'],
            ['Lu·∫≠t kinh t·∫ø', '7380107'],
            ['Ti·∫øng Anh th∆∞∆°ng m·∫°i ‚Äì du l·ªãch', '7220201'],
        ];

        await Major.destroy({ where: {} });
        const majors = await Major.bulkCreate(
            majorsData.map(([name, deptCode], i) => ({
                name,
                code: `${deptCode}-${(i + 1).toString().padStart(2, '0')}`,
                deptId: departments.find(d => d.code === deptCode).id,
            })),
            { returning: true }
        );
        console.log(`‚úÖ Created ${majors.length} majors`);

        // ===================== Courses =====================
        await Course.destroy({ where: {} });
        const courses = await Course.bulkCreate([
            { code: 'MATH101', name: 'To√°n cao c·∫•p', credit: 3 },
            { code: 'CS101', name: 'L·∫≠p tr√¨nh c∆° b·∫£n', credit: 3 },
            { code: 'PHYS101', name: 'V·∫≠t l√Ω ƒë·∫°i c∆∞∆°ng', credit: 3 },
            { code: 'EE101', name: 'ƒêi·ªán t·ª≠ c∆° b·∫£n', credit: 3 },
            { code: 'BUS101', name: 'Qu·∫£n tr·ªã h·ªçc', credit: 3 },
        ]);
        console.log(`‚úÖ Created ${courses.length} courses`);

        // ===================== Roles =====================
        await Role.destroy({ where: {} });
        const roles = await Role.bulkCreate(
            [
                { code: 'admin', name: 'Admin', description: 'Qu·∫£n tr·ªã h·ªá th·ªëng' },
                { code: 'staff', name: 'Staff', description: 'Nh√¢n vi√™n' },
                { code: 'student', name: 'Student', description: 'Sinh vi√™n' },
            ],
            { returning: true }
        );
        console.log(`‚úÖ Created ${roles.length} roles`);

        // ===================== Users =====================
        await User.destroy({ where: {} });
        const users = await User.bulkCreate([
            {
                firstname: 'Admin',
                lastname: 'EPU',
                email: 'admin@epu.edu.vn',
                password: 'admin123',
                roleId: roles.find(r => r.code === 'admin').id,
                is_active: true,
            },
            {
                firstname: 'Staff',
                lastname: 'EPU',
                email: 'staff@epu.edu.vn',
                password: 'staff123',
                roleId: roles.find(r => r.code === 'staff').id,
                is_active: true,
            },
        ]);
        console.log(`‚úÖ Created ${users.length} users`);

        // ===================== Students =====================
        console.log('üöÄ Generating 25,000 students...');
        const students = [];
        const existingCodes = new Set();
        const vietnameseLastNames = ['Nguy·ªÖn', 'Tr·∫ßn', 'L√™', 'Ph·∫°m', 'Ho√†ng', 'V≈©', 'ƒê·∫∑ng', 'B√πi', 'ƒê·ªó', 'H·ªì'];
        const vietnameseMiddleNames = ['VƒÉn', 'Th·ªã', 'H·ªØu', 'Quang', 'Minh', 'Ng·ªçc', 'Tu·∫•n', 'B·∫£o', 'Gia', 'Thanh'];
        const vietnameseFirstNames = ['An', 'B√¨nh', 'C∆∞·ªùng', 'D∆∞∆°ng', 'H·∫£i', 'Huy', 'Khang', 'Minh', 'Nam', 'Qu√¢n', 'Th·∫£o', 'Lan', 'Vy', 'Anh', 'Tu·∫•n'];

        function generateUniqueStudentCode() {
            let code;
            do {
                code = `21${Math.floor(100000000 + Math.random() * 900000000)}`;
            } while (existingCodes.has(code));
            existingCodes.add(code);
            return code;
        }

        // ‚úÖ H√†m lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
        function removeVietnameseTones(str) {
            return str
                .normalize('NFD')
                .replace(/[\u0300-\u036f]/g, '')
                .replace(/ƒë/g, 'd')
                .replace(/ƒê/g, 'D');
        }

        for (let i = 0; i < 25000; i++) {
            const major = faker.helpers.arrayElement(majors);
            const lastname = faker.helpers.arrayElement(vietnameseLastNames);
            const middlename = faker.helpers.arrayElement(vietnameseMiddleNames);
            const firstname = faker.helpers.arrayElement(vietnameseFirstNames);
            const code = generateUniqueStudentCode();

            // ‚úÖ Email chu·∫©n: <t√™n><ch·ªØ ƒë·∫ßu h·ªç><ch·ªØ ƒë·∫ßu t√™n ƒë·ªám>.<m√£>@epu.edu.vn
            const emailPrefixRaw = `${firstname.toLowerCase()}${lastname[0].toLowerCase()}${middlename[0].toLowerCase()}`;
            const emailPrefix = removeVietnameseTones(emailPrefixRaw);
            const email = `${emailPrefix}.${code}@epu.edu.vn`;

            students.push({
                code,
                firstname,
                lastname: `${lastname} ${middlename}`,
                dob: faker.date.birthdate({ min: 18, max: 25, mode: 'age' }),
                gender: faker.helpers.arrayElement(['male', 'female']),
                email,
                phone: faker.phone.number('09########'),
                address: faker.location.streetAddress(),
                majorId: major.id,
            });
        }


        await Student.destroy({ where: {} });
        const createdStudents = await Student.bulkCreate(students, { returning: true });
        console.log(`‚úÖ Created ${createdStudents.length} students`);


        // ===================== Certificates =====================
        const certificates = createdStudents.map(stu => ({
            studentId: stu.id,
            type: faker.helpers.arrayElement(['BA', 'MA', 'PhD', 'CERT']),
            number: `CERT-${stu.code}`,
            grad_date: faker.date.between({ from: '2022-01-01', to: new Date() }),
            issuer: 'ƒê·∫°i h·ªçc ƒêi·ªán l·ª±c',
            status: faker.helpers.arrayElement(['draft', 'issued', 'revoked']),
        }));
        await Certificate.destroy({ where: {} });
        await Certificate.bulkCreate(certificates);
        console.log(`‚úÖ Created ${certificates.length} certificates`);

        // ===================== Grades =====================
        console.log('üéì Generating grades...');
        const grades = [];
        for (const student of createdStudents) {
            const selectedCourses = faker.helpers.arrayElements(courses, faker.number.int({ min: 3, max: 6 }));
            for (const course of selectedCourses) {
                grades.push({
                    studentId: student.id,
                    courseId: course.id,
                    grade: faker.number.float({ min: 0, max: 10, precision: 0.01 }),
                    date: faker.date.between({ from: '2022-01-01', to: new Date() }),
                });
            }
        }
        await Grade.destroy({ where: {} });
        await Grade.bulkCreate(grades, { hooks: false });
        console.log(`‚úÖ Created ${grades.length} grades`);

        console.log('üéâ Seeding completed successfully!');
        process.exit(0);

    } catch (err) {
        console.error('‚ùå Error seeding data:', err);
        process.exit(1);
    }
}

seed();
